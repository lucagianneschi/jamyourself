<?php/* ! \par		Info Generali: * \author		Luca Gianneschi * \version		1.0 * \date		2013 * \copyright		Jamyourself.com 2013 * \par			Info Classe: * \brief		box caricamento info event * \details		Recupera le informazioni dell'evento, le inserisce in un array da passare alla view * \par			Commenti: * \warning * \bug * \todo			 * */if (!defined('ROOT_DIR'))    define('ROOT_DIR', '../');require_once ROOT_DIR . 'config.php';require_once CLASSES_DIR . 'event.class.php';require_once CLASSES_DIR . 'eventParse.class.php';/** * \brief	EventBox class  * \details	box class to pass info to the view  */class EventBox {    public $config;    public $error;    public $eventArray;    /**     * \fn	__construct()     * \brief	class construct to import config file     */    function __construct() {        $this->config = json_decode(file_get_contents(CONFIG_DIR . "boxes/event.config.json"), false);    }    /**     * \fn	initForMediaPage($objectId)     * \brief	Init EventBox instance for Media Page     * \param	$objectId for event     */    public function initForMediaPage($objectId) {        $eventP = new EventParse();        $eventP->where('objectId', $objectId);        $eventP->where('active', true);        $eventP->whereInclude('fromUser');        $eventP->setLimit($this->config->limitEventForMediaPage);        $events = $eventP->getEvents();        if ($events instanceof Error) {            $this->error = $events->getErrorMessage();            $this->eventArray = array();            return;        } elseif (is_null($events)) {            $this->error = null;            $this->eventArray = array();            return;        } else {            $this->error = null;            $this->eventArray = $events;        }    }    /**     * \fn	initForPersonalPage($objectId)     * \brief	Init EventBox instance for Personal Page     * \param	$objectId for user that owns the page     * \todo         */    public function initForPersonalPage($objectId, $updatedAt = false, $limit = null, $skip = null) {        $event = new EventParse();        $event->wherePointer('fromUser', '_User', $objectId);        $event->where('active', true);        $event->setLimit((!is_null($limit) && is_int($limit) && $limit >= MIN && MAX >= $limit) ? $limit : DEFAULTQUERY);        $event->setSkip((!is_null($skip) && is_int($skip) && $skip >= 0) ? $skip : 0);        ($updatedAt == false) ? $event->orderByDescending('eventDate') : $event->orderByDescending('updatedAt');        $events = $event->getEvents();        if ($events instanceof Error) {            $this->error = $events->getErrorMessage();            $this->eventArray = array();            return;        } elseif (is_null($events)) {            $this->error = null;            $this->eventArray = array();            return;        } else {            $this->error = null;            $this->eventArray = $events;        }    }    /**     * \fn	initForTimeLine($city = null, $type = null, $eventDate = null, $limit = null, $skip = null)     * \brief	Init EventBox instance for TimeLine     * \param	$objectId for user that owns the page     * \todo    $city = null, $type = null, $eventDate = null, $limit = null, $skip = null; introdurre la ricerca in abse alall geolocalizzazione, fai query su locationParse, poi cerchi l'evento più vicino     */    public function initForTimeLine($city = null, $type = null, $eventDate = null, $limit = null, $skip = null) {        $event = new EventParse();        if (!is_null($city)) {            require_once CLASSES_DIR . 'location.class.php';            require_once CLASSES_DIR . 'locationParse.class.php';            $city = new LocationParse();            $city->where('city', $city);            $city->setLimit(MIN);            $cities = $city->getLocations();            if ($cities instanceof Error || is_null($cities)) {                $event->where('city', $city);            } else {                //usa geolocalizzazione            }        } elseif (!is_null($type)) {            $event->where('type', $type);        } elseif (!is_null($eventDate)) {            $event->whereGreaterThanOrEqualTo('eventDate', $eventDate);        }        $event->setLimit((!is_null($limit) && is_int($limit) && $limit >= MIN && MAX >= $limit) ? $limit : $this->config->limitEventForTimeline);        $event->setSkip((!is_null($skip) && is_int($skip) && $skip >= 0) ? $skip : 0);        $event->whereExists('createdAt');        $event->orderByDescending('eventDate');        $events = $event->getEvents();        if ($events instanceof Error) {            $this->error = $events->getErrorMessage();            $this->eventArray = array();            return;        } elseif (is_null($events)) {            $this->error = null;            $this->eventArray = array();            return;        } else {            $this->error = null;            $this->eventArray = $events;        }    }}?>