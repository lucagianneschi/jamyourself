<?php/* ! \par		Info Generali: * \author		Luca Gianneschi * \version		1.0 * \date		2013 * \copyright	Jamyourself.com 2013 * \par			Info Classe: * \brief		box Relations * \details		Recupera le ultime relazioni per tipologia di utente * \par			Commenti: * \warning * \bug * \todo		 * */if (!defined('ROOT_DIR'))    define('ROOT_DIR', '../');require_once ROOT_DIR . 'config.php';require_once BOXES_DIR . 'utilsBox.php';require_once CLASSES_DIR . 'activity.class.php';require_once CLASSES_DIR . 'activityParse.class.php';class RelationBox {    public $config;    public $error;    public $relationArray;    /**     * \fn	__construct()     * \brief	class construct to import config file     */    function __construct() {        $this->config = json_decode(file_get_contents(CONFIG_DIR . "boxes/relation.config.json"), false);    }    /**     * \fn	initForPersonalPage($objectId, $type)     * \brief	Init RelationBox instance for Personal Page     * \param	$objectId for user that owns the page, $type     */    public function init($objectId, $type) {        $info = array();        $followingArray = array();        $friendshipArray = array();        $venuesArray = array();        $jammersArray = array();        $followersArray = array();        if ($type == 'SPOTTER') {            $activityFollowing = new ActivityParse();            $activityFollowing->wherePointer('fromUser', '_User', $objectId);            $activityFollowing->whereEqualTo('type', 'FOLLOWING');            $activityFollowing->where('active', true);            $activityFollowing->whereInclude('toUser');            $activityFollowing->setLimit($this->config->following);            $activityFollowing->orderByDescending('createdAt');            $followings = $activityFollowing->getActivities();            if ($followings instanceof Error) {                $this->error = $followings->getErrorMessage();                $this->relationArray = array();                return;            } else {                foreach ($followings as $following)                    array_push($followingArray, $following);            }            $activityFriendship = new ActivityParse();            $activityFriendship->setLimit($this->config->friends);            $activityFriendship->wherePointer('fromUser', '_User', $objectId);            $activityFriendship->whereEqualTo('type', 'FRIENDSHIPREQUEST');            $activityFriendship->whereEqualTo('status', 'A');            $activityFriendship->where('active', true);            $activityFriendship->whereInclude('toUser');            $activityFriendship->orderByDescending('createdAt');            $friendships = $activityFriendship->getActivities();            if ($friendships instanceof Error) {                $this->error = $friendships->getErrorMessage();                $this->relationArray = array();                return;            } else {                foreach ($friendships as $friendship)                    array_push($friendshipArray, $friendship);            }            $this->error = null;            $this->relationArray = array('followers' => array(), 'following' => $followingArray, 'friendship' => $friendshipArray, 'venuesCollaborators' => array(), 'jammersCollaborators' => array());            return;        } else {            $collaborators = getRelatedUsers($objectId, 'collaboration', '_User', false, $this->config->collaborations, 0);            if ($collaborators instanceof Error) {                $this->error = $collaborators->getErrorMessage();                $this->relationArray = array();                return;            } else {                foreach ($collaborators as $collaborator) {                    ($collaborator->getType() == 'VENUE') ? array_push($venuesArray, $collaborator) : array_push($jammersArray, $collaborator);                }            }            $following = new ActivityParse();            $following->wherePointer('toUser', '_User', $objectId);            $following->whereEqualTo('type', 'FOLLOWING');            $following->where('active', true);            $following->whereInclude('fromUser');            $following->setLimit($this->config->followingProfessional);            $following->orderByDescending('createdAt');            $followers = $following->getActivities();            if ($followers instanceof Error) {                $this->error = $followers->getErrorMessage();                $this->relationArray = array();                return;            } else {                foreach ($followers as $follower) {                    array_push($followersArray, $follower);                }            }        }        $this->error = null;        $this->relationArray = array('followers' => $followersArray, 'following' => array(), 'friendship' => array(), 'venuesCollaborators' => $venuesArray, 'jammersCollaborators' => $jammersArray);    }}?>