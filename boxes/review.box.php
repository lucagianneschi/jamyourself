                        <?php/* ! \par		Info Generali: * \author		Luca Gianneschi * \version		1.0 * \date		2013 * \copyright		Jamyourself.com 2013 * \par			Info Classe: * \brief		box caricamento review event * \details		Recupera le informazioni sulla review dell'event, le inserisce in un array da passare alla view * \par			Commenti: * \warning * \bug * \todo		 */if (!defined('ROOT_DIR'))    define('ROOT_DIR', '../');require_once ROOT_DIR . 'config.php';require_once CLASSES_DIR . 'comment.class.php';require_once CLASSES_DIR . 'commentParse.class.php';require_once BOXES_DIR . 'utilsBox.php';/** * \brief	ReviewBox class * \details	box class to pass info to the view */class ReviewBox {    public $config;    public $error;    public $mediaInfo;    public $reviewArray;    /**     * \fn	__construct()     * \brief	class construct to import config file     */    function __construct() {        $this->config = json_decode(file_get_contents(CONFIG_DIR . "boxes/review.config.json"), false);    }    /**     * \fn	initForMediaPage($objectId, $className, $limit, $skip)     * \brief	Init ReviewBox instance for Media Page     * \param	$objectId of the review to display information, Event or Record class     * \param   $className, $limit, $skip,$currentUserId     * \todo	     */    public function initForMediaPage($objectId, $className, $limit, $skip) {        $reviewArray = array();        $this->mediaInfo = null;        $review = new CommentParse();        if ($className == 'Event') {            $review->wherePointer('event', $className, $objectId);            $review->where('type', 'RE');        } else {            $review->wherePointer('record', $className, $objectId);            $review->where('type', 'RR');        }        $review->where('active', true);        $review->whereInclude('fromUser');        $review->setLimit((!is_null($limit) && is_int($limit) && $limit >= MIN && MAX <= $limit) ? $limit : $this->config->limitForMediaPage);        $review->setSkip((!is_null($skip) && is_int($skip)) ? $skip : 0);        $review->orderByDescending('createdAt');        $reviews = $review->getComments();        if ($reviews instanceof Error) {            $this->error = $reviews->getErrorMessage();            $this->reviewArray = array();            return;        } elseif (is_null($reviews)) {            $this->error = null;            $this->reviewArray = array();            return;        } else {            foreach ($reviews as $review) {                if (!is_null($review->getFromUser()))                    array_push($reviewArray, $review);            }        }        $this->error = null;        $this->reviewArray = $reviewArray;    }    /**     * \fn	initForPersonalPage($objectId, $type, $className)     * \brief	Init ReviewBox instance for Personal Page     * \param	$objectId of the user who owns the page, $type of user, $className Record or Event class     * \param   $type, $className     */    function initForPersonalPage($objectId, $type, $className) {        $reviewArray = array();        $this->mediaInfo = null;        $reviewP = new CommentParse();        $reviewP->where('active', true);        if ($type == 'SPOTTER' && $className == 'Event') {            $field = 'fromUser';            $reviewP->where('type', 'RE');            $reviewP->whereInclude('event.fromUser');        } elseif ($type == 'SPOTTER' && $className == 'Record') {            $field = 'fromUser';            $reviewP->where('type', 'RR');            $reviewP->whereInclude('record.fromUser');        } elseif ($type != 'SPOTTER' && $className == 'Event') {            $field = 'toUser';            $reviewP->where('type', 'RE');            $reviewP->whereInclude('event,fromUser');        } elseif ($type != 'SPOTTER' && $className == 'Record') {            $field = 'toUser';            $reviewP->where('type', 'RR');            $reviewP->whereInclude('record,fromUser');        }        $reviewP->wherePointer($field, '_User', $objectId);        $reviewP->setLimit($this->config->limitForPersonalPage);        $reviewP->orderByDescending('createdAt');        $reviews = $reviewP->getComments();        if ($reviews instanceof Error) {            $this->error = $reviews->getErrorMessage();            $this->reviewArray = array();            return;        } elseif (is_null($reviews)) {            $this->error = null;            $this->reviewArray = array();            return;        } else {            foreach ($reviews as $review) {                $condition1 = ($type == 'SPOTTER' && $className == 'Event' && !is_null($review->getEvent()) && !is_null($review->getEvent()->getFromUser()));                $condition2 = ($type == 'SPOTTER' && $className == 'Record' && !is_null($review->getRecord()) && !is_null($review->getRecord()->getFromUser()));                $condition3 = ($type != 'SPOTTER' && $className == 'Event' && !is_null($review->getEvent()) && !is_null($review->getFromUser()));                $condition4 = ($type != 'SPOTTER' && $className == 'Record' && !is_null($review->getRecord()) && !is_null($review->getFromUser()));                if ($condition1 || $condition2 || $condition3 || $condition4) {                    array_push($reviewArray, $review);                }            }            $this->error = null;            $this->reviewArray = $reviewArray;        }    }    /**     * \fn	initForUploadReviewPage($objectId, $className)     * \brief	Init REviewBox instance for Upload Review Page     * \param	$objectId for the event or record, $className Record or Event     * \todo         */    public function initForUploadReviewPage($reviewedId, $className, $limit = 1) {        $this->reviewArray = array();        global $boxes;        $currentUserId = sessionChecker();        if ($currentUserId == $boxes['NOID']) {            $this->error = $boxes['ONLYIFLOGGEDIN'];            $this->mediaInfo = null;            return;        }        if ($className == 'Event') {            require_once CLASSES_DIR . 'event.class.php';            require_once CLASSES_DIR . 'eventParse.class.php';            $event = new EventParse();            $event->where('objectId', $reviewedId);            $event->where('active', true);            $event->whereInclude('fromUser');            $event->setLimit((!is_null($limit) && is_int($limit) && $limit >= MIN && MAX <= $limit) ? $limit : $this->config->limitForUploadReviewPage);            $event->orderByDescending('createdAt');            $events = $event->getEvents();            if ($events instanceof Error) {                $this->error = $events->getErrorMessage();                $this->mediaInfo = null;                return;            } elseif (is_null($events)) {                $this->error = null;                $this->mediaInfo = null;                return;            } else {                foreach ($events as $event) {                    if (!is_null($event->getFromUser()))                        array_push($this->reviewArray, $event);                }                $this->error = null;                $this->mediaInfo = $this->getReviewInfoForUploadReviewPage();                return;            }        } else {            require_once CLASSES_DIR . 'record.class.php';            require_once CLASSES_DIR . 'recordParse.class.php';            $record = new RecordParse();            $record->where('objectId', $reviewedId);            $record->where('active', true);            $record->setLimit((!is_null($limit) && is_int($limit) && $limit >= MIN && MAX <= $limit) ? $limit : $this->config->limitForUploadReviewPage);            $record->orderByDescending('createdAt');            $record->whereInclude('fromUser');            $records = $record->getRecords();            if ($records instanceof Error) {                $this->error = $records->getErrorMessage();                $this->mediaInfo = null;                return;            } elseif (is_null($records)) {                $this->error = null;                $this->mediaInfo = null;                return;            } else {                foreach ($records as $record) {                    if (!is_null($record->getFromUser()))                        array_push($this->reviewArray, $record);                }            }        }        $this->error = null;        $this->getReviewInfoForUploadReviewPage();    }    function getReviewInfoForUploadReviewPage() {        if (!is_null($this->reviewArray) && count($this->reviewArray) > 0) {            $this->mediaInfo = array();            foreach ($this->reviewArray as $rev) {                $elem = new stdClass();                $elem->title = $rev->getTitle();                if ($rev instanceof Record) {                    $elem->genre = $rev->getGenre();                    $elem->thumbnail = getRecordThumbnailURL($rev->getFromUser(), $rev->getThumbnailCover());                    $elem->featuring = getRelatedUsers($rev->getObjectId(), "featuring", "Record");                } elseif ($rev instanceof Event) {                    $elem->genre = $rev->getTags();                    $elem->thumbnail = getEventThumbnailURL($rev->getFromUser(), $rev->getThumbnail());                    $elem->featuring = getRelatedUsers($rev->getObjectId(), "featuring", "Event");                }                $elem->rating = 0;                $elem->authorThumbnail = getUserThumbnailURL($rev->getFromUser());                $fromUser = $rev->getFromUser();                $elem->fromUser = $fromUser->getUsername();                                $this->mediaInfo[] = $elem;            }        } else {            $this->mediaInfo = null;        }    }}?>